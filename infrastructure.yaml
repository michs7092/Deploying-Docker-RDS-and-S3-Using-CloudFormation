AWSTemplateFormatVersion: '2010-09-09'
Description: Template to deploy a VPC with 2 public and 2 private subnets, Auto Scaling Group behind a Load Balancer, RDS, S3, and necessary IAM roles and policies.

# ############################ Parameters ############################
# This section defines input parameters for the CloudFormation template.
# Parameters created:
# 1. ProjectName: The name prefix for resources.
# 2. DBUsername: Username for the RDS database.
# 3. DBPassword: Password for the RDS database.
# 4. DatabaseName: Name of the RDS database.
# 5. S3BucketName: Name of the S3 bucket.
Parameters:
  ProjectName:
    Description: Project name used as prefix for resources   
    Type: String
    Default: myproject

  DBUsername:
    Description: Username for the RDS database
    Type: String
    Default: admin

  DBPassword:
    Description: Password for the RDS database
    Type: String
    NoEcho: true
    Default: adminadmin

  DatabaseName:
    Description: The name of the RDS database
    Type: String
    Default: cloud_services_app

  S3BucketName:
    Description: S3 Bucket Name
    Type: String
    Default: mybucket

# ############################ Resources ############################
# This section defines resources created by the CloudFormation template.
# Resources created:
# 1. VPC with 2 public and 2 private subnets.
# 2. Internet Gateway and Route Tables for public access.
# 3. NAT Gateway for private subnets.
# 4. Security Groups for EC2 and RDS.
# 5. Load Balancer for distributing traffic.
# 6. S3 Bucket for file storage.
# 7. RDS instance for database management.
# 8. IAM roles and policies for EC2.
# 9. EC2 instances launched by Auto Scaling Group.
Resources:
  ############################ VPC and Subnets ############################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-VPC"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateSubnet2"

  ############################ Internet Gateway and Routes ############################
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    # Tags removed as InternetGateway does not support tags

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicRouteTable"

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ############################ Private Route Table ############################
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PrivateRouteTable"

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ############################ NAT Gateway ############################
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
    
  ############################ Security Groups ############################
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ############################ Load Balancer ############################
  # This section creates a Load Balancer for distributing traffic to EC2 instances.
  # Load Balancer created:
  # 1. Internet-facing Load Balancer to handle HTTP traffic.
  # 2. Target Group for registered EC2 instances.
  # 3. Listener to route incoming traffic to the Target Group.

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ProjectName}-LoadBalancer"
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ProjectName}-TargetGroup"
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30 
      HealthCheckTimeoutSeconds: 5    
      HealthyThresholdCount: 2         
      UnhealthyThresholdCount: 2       
      TargetType: instance

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup

  ############################ RDS Instance ############################
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties: 
      DBInstanceClass: db.t3.micro
      Engine: mysql
      AllocatedStorage: 20
      DBName: !Ref DatabaseName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MultiAZ: false
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS DB
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ############################ S3 Bucket ############################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName

  ############################ IAM Role ############################
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3BucketName}/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  ############################ EC2 Instances ############################
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${ProjectName}-LaunchTemplate"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-0866a3c8686eaeeba
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: !Sub "${ProjectName}-ASG-Website"
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: 
          Fn::Base64: !Sub |
            #!/bin/bash
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo docker run -d -p 80:5000 public.ecr.aws/f3d4e3g3/webapp:latest

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 3
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      

Outputs:
  DBUsernameOutput:
    Description: RDS Database Username
    Value: !Ref DBUsername

  DBPasswordOutput:
    Description: RDS Database Password
    Value: !Ref DBPassword

  DBHostnameOutput:
    Description: RDS Database Hostname
    Value: !GetAtt RDSDBInstance.Endpoint.Address

  DBPortOutput:
    Description: RDS Database Port
    Value: 3306

  LoadBalancerDNS:
    Description: Load Balancer DNS URL
    Value: !GetAtt LoadBalancer.DNSName

  S3BucketNameOutput:
    Description: S3 Bucket Name
    Value: !Ref S3BucketName
